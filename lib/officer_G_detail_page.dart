import 'dart:io';
import 'package:flutter/material.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:dio/dio.dart';
import 'package:intl/intl.dart';
import 'package:open_file/open_file.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'config.dart';
import 'storage_service.dart';
import 'refreshtoken.dart';

class GrievanceDetailPage extends StatefulWidget {
  final Map<String, dynamic> complaint;

  const GrievanceDetailPage({Key? key, required this.complaint}) : super(key: key);

  @override
  _GrievanceDetailPageState createState() => _GrievanceDetailPageState();
}


class _GrievanceDetailPageState extends State<GrievanceDetailPage> {
  List<dynamic> actionLogs = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    fetchActionLogs();
  }

  Future<void> fetchActionLogs() async {
    String grievanceId = widget.complaint['grievance_id'];
    String? token = await SecureStorage.getAccessToken();

    var response = await http.post(
      Uri.parse('$baseURL/display_AL'),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: json.encode({'grievance_id': grievanceId}),
    );

    if (response.statusCode == 200) {
      var data = json.decode(response.body);
      setState(() {
        actionLogs = data;
        isLoading = false;
      });
    } else if (response.statusCode == 401) {
      bool refreshed = await refreshToken();
      if (refreshed) {
        token = await SecureStorage.getAccessToken();
        await fetchActionLogs(); // Recursive call to fetch data again
      }
    } else {
      print("Failed to fetch action logs: ${response.statusCode}");
    }
  }

  Future<void> downloadAndOpenDocument(String url, BuildContext context) async {
    try {
      bool permissionGranted = await requestStoragePermission();
      if (!permissionGranted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Storage permission denied")),
        );
        return;
      }

      Directory directory = Platform.isAndroid
          ? (await getExternalStorageDirectory())!
          : await getApplicationDocumentsDirectory();

      String fileName = url
          .split('/')
          .last;
      String filePath = "${directory.path}/$fileName";

      Dio dio = Dio();
      await dio.download(url, filePath);

      OpenFile.open(filePath);
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Error: $e")));
    }
  }

  Future<bool> requestStoragePermission() async {
    if (Platform.isAndroid) {
      if (await Permission.storage.isGranted) return true;

      if (await Permission.storage
          .request()
          .isGranted) {
        return true;
      }

      if (await Permission.manageExternalStorage
          .request()
          .isGranted) {
        return true;
      }

      return false;
    }
    return true;
  }

  // String getStatusMessage(Map<String, dynamic> item) {
  //   final code = item['code'];
  //   final name = item['officer_name'];
  //
  //   switch (code) {
  //     case "Complaint Registered":
  //       return 'You have registered.';
  //     case "Assigned to Level 2":
  //       return '$name has assigned your grievance to Block Educational Officer.';
  //     case "ATR Report Generated by Level 2":
  //       return 'ATR report generated by $name.';
  //     case "ATR Verified by Level 1":
  //       return '$name verified the ATR.';
  //     case "ATR Rejected by Level 1":
  //       return '$name asked for more clarification about the ATR submitted by Block Educational Officer.';
  //     case "ATR Updated & Resubmitted by Level 2":
  //       return '$name has updated and resubmitted the ATR.';
  //     case "Complaint Disposed":
  //       return 'Your grievance has been marked as disposed.';
  //     case "Grievance Returned by Level 2":
  //       return '$name has returned the grievance for further clarification.';
  //     case "Grievance Accepted by Level 2":
  //       return '$name has accepted your grievance for further investigation.';
  //     default:
  //       return 'Update on "$code"';
  //   }
  // }

  String formatToDate(String timestamp) {
    final DateTime dateTime = DateTime.parse(timestamp).toLocal();
    return DateFormat('dd/MM/yyyy').format(dateTime);
  }

  Future<void> performAction(String action) async {
    String grievanceId = widget.complaint['grievance_id'];
    String apiUrl = '$baseURL/addAction';
    int actionCodeId = 0;

    if (action == 'accept') {
      actionCodeId = 9;
    } else if (action == 'return') {
      actionCodeId = 8;
    }

    String? token = await SecureStorage.getAccessToken();

    try {
      var response = await http.post(
        Uri.parse(apiUrl),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: json.encode({
          'grievance_id': grievanceId,
          'action_code_id': actionCodeId,
        }),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Grievance ${action == 'accept' ? "accepted" : "returned"} successfully')),
        );

        // ðŸŒŸ Refresh the page and fetch the latest data
        await fetchActionLogs(); // Refresh action logs
        // await refreshComplaintDetails(); // Refresh grievance details
      } else {
        print("Failed to $action grievance: ${response.statusCode}");
      }
    } catch (e) {
      print("Error performing $action action: $e");
    }
  }


  Future<String?> getRoleId() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    return prefs.getString('role_id');
  }

  @override
  Widget build(BuildContext context) {
    final imageUrls = widget.complaint['grievance_media']?['images'];
    final documentUrls = widget.complaint['grievance_media']?['documents'];

    final List<String> images = List<String>.from(imageUrls ?? []);
    final List<String> documents = List<String>.from(documentUrls ?? []);

    return Scaffold(
      appBar: AppBar(
        title: Text("${widget.complaint["title"]} (${widget
            .complaint["grievance_id"]})",
            style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.indigo,
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (images.isNotEmpty)
              CarouselSlider(
                options: CarouselOptions(
                  height: 200.0,
                  enlargeCenterPage: true,
                ),
                items: images.map((imagePath) {
                  final imageUrl = "$baseURL/$imagePath";
                  return GestureDetector(
                    onTap: () =>
                        showDialog(
                          context: context,
                          builder: (_) =>
                              Dialog(
                                child: InteractiveViewer(
                                  child: Image.network(imageUrl),
                                ),
                              ),
                        ),
                    child: Image.network(
                      imageUrl,
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) =>
                          Container(
                            height: 200,
                            color: Colors.grey[300],
                            child: Icon(Icons.broken_image),
                          ),
                    ),
                  );
                }).toList(),
              ),
            SizedBox(height: 16),
            Text("Description: ${widget.complaint["description"]}",
                style: TextStyle(fontSize: 16)),
            SizedBox(height: 16),
            Text("Documents:",
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 8),
            documents.isNotEmpty
                ? Column(
              children: documents.map((docUrl) {
                final fullDocUrl = "$baseURL/$docUrl";
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 4.0),
                  child: ListTile(
                    leading: Icon(Icons.picture_as_pdf, color: Colors.red),
                    title: Text(docUrl
                        .split('/')
                        .last),
                    onTap: () => downloadAndOpenDocument(fullDocUrl, context),
                  ),
                );
              }).toList(),
            )
                : Text("No documents available."),

            // ðŸŒŸ Role Check and Button Display
            FutureBuilder<String?>(
              future: getRoleId(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return CircularProgressIndicator();
                }
                if (snapshot.hasData && snapshot.data == '5') {
                  return Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      ElevatedButton(
                        onPressed: () => performAction('accept'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.green,
                        ),
                        child: Text("Accept"),
                      ),
                      ElevatedButton(
                        onPressed: () => performAction('return'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.red,
                        ),
                        child: Text("Return"),
                      ),
                    ],
                  );
                }
                return SizedBox.shrink();
              },
            ),
          ],
        ),
      ),
    );
  }

}
