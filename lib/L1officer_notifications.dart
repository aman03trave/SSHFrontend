import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http;
import 'config.dart';
import 'storage_service.dart';
import 'refreshtoken.dart';
import 'Level1_dashboard.dart';
import 'package:timeago/timeago.dart' as timeago;

class LevelReminderPage extends StatefulWidget {
  const LevelReminderPage({super.key});

  @override
  State<LevelReminderPage> createState() => _LevelReminderPageState();
}

class _LevelReminderPageState extends State<LevelReminderPage> {
  List<Map<String, dynamic>> notifications = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    fetchNotifications();
  }

  Future<void> fetchNotifications() async {
    try {
      String? token = await SecureStorage.getAccessToken();
      var response = await http.get(
        Uri.parse('$baseURL/getRemindersL1'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );

      if (response.statusCode == 401) {
        bool refreshed = await refreshToken();
        if (refreshed) {
          token = await SecureStorage.getAccessToken();
          response = await http.get(
            Uri.parse('$baseURL/getRemindersL1'),
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer $token',
            },
          );
        }
      }

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);

        setState(() {
          notifications = data.map<Map<String, dynamic>>((item) {
            return {
              'action_id': item['action_id'],
              'grievance_id': item['grievance_id'],
              'officer_id': item['officer_id'],
              'action_code': item['action_code'],
              'timestamp': item['action_timestamp'] ?? item['reminder_timestamp'],
              'title': item['title'],
              'description': item['description'],
              'level1_officer': item['level1_officer'],
              'complainant': item['complainant'],
              'reminder_id': item['reminder_id'],
              'reminder_timestamp': item['reminder_timestamp'],
              'viewed': item['viewed'],
              'type': item['type'],
              'message': generateMessage(item),
            };
          }).toList();
          isLoading = false;
        });
      } else {
        print('Failed to load notifications: ${response.body}');
      }
    } catch (e) {
      print('Error fetching notifications: $e');
    }
  }

  Future<void> markNotificationAsViewed(String actionId) async {
    try {
      print(actionId);
      String? token = await SecureStorage.getAccessToken();
      final response = await http.post(
        Uri.parse('$baseURL/updateNotificationStatus'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({'grievance_id': actionId}),
      );

      if (response.statusCode == 200) {
        print('Notification marked as viewed.');

        Navigator.push(context, MaterialPageRoute(builder: (context) => LevelReminderPage()));
      } else {
        print('Failed to update notification status: ${response.body}');
      }
    } catch (e) {
      print('Error updating notification status: $e');
    }
  }


  String generateMessage(Map<String, dynamic> item) {
    final code = item['action_code'];
    final complainant = item['complainant'];
    final officer_name = item['level1_officer'];
    final title = item['title'];

    if (item['type'] == "Reminder" && item['viewed'] == false) {
      return 'Reminder for grievance "$title". Please take necessary action.';

    }
    if (item['type'] == "Reminder" && item['viewed'] == true) {
      return 'Reminder for grievance "$title" sent.';
    }
    else {
      switch (code) {
        case "Complaint Registered":
          return '$complainant has registered a new grievance titled "$title".';
        case "Assigned to Level 2":
          return 'You have assigned the grievance to $officer_name (BO).';
        case "ATR Report Generated by Level 2":
          return 'ATR report generated by Level 2 for "$title".';
        case "ATR Verified by Level 1":
          return 'You verified the ATR for "$title".';
        case "ATR Rejected by Level 1":
          return '$officer_name (BO) rejected the ATR submitted for "$title".';
        case "ATR Updated & Resubmitted by Level 2":
          return '$officer_name (BO) has updated and resubmitted ATR.';
        case "Complaint Disposed":
          return 'Grievance has been marked as disposed.';
        case "Grievance Returned by Level 2":
          return '$officer_name (BO) has returned the grievance "$title" for further clarification.';
        case "Grievance Accepted by Level 2":
          return '$officer_name (BO) has accepted the grievance.';
        default:
          return 'Update on "$title"';
      }
    }
  }


  String formatTimeAgo(String timestamp) {
    final time = DateTime.parse(timestamp);
    return timeago.format(time);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Notifications"),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => GrievanceDashboard()),
            );
          },
        ),
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : notifications.isEmpty
          ? const Center(child: Text("No notifications available."))
          : ListView.builder(
        itemCount: notifications.length,
        itemBuilder: (context, index) {
          final item = notifications[index];

          return GestureDetector(
            onTap: () async {
              if (item['type'] == "Reminder" && item['viewed'] == false) {
                await markNotificationAsViewed(item['grievance_id']);
                setState(() {
                  notifications[index]['viewed'] = true;
                });
              }
            },
            child: Card(
              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              elevation: 2,
              color: item['type'] == "Reminder"
                  ? Colors.orange[100] // Reminders are highlighted in orange
                  : (item['viewed'] ?? false) // Check if viewed is null, then default to false
                  ? Colors.grey[300] // Viewed notifications are greyed out
                  : const Color(0xFFEAF3FF), // Unviewed notifications are blue
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            '${item['title']} (${item['grievance_id']})',
                            style: TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.bold,
                              color: Colors.black87,
                            ),
                          ),
                        ),
                        Text(
                          formatTimeAgo(item['timestamp']),
                          style: const TextStyle(color: Colors.grey, fontSize: 12),
                        ),
                      ],
                    ),
                    const SizedBox(height: 10),
                    Text(
                      item['message'],
                      style: const TextStyle(fontSize: 12),
                    ),
                    const SizedBox(height: 10),

                    // ðŸ”¥ Button only visible for "Reminder" and if not viewed
                    if (item['type'] == "Reminder" && (item['viewed'] ?? false) == false)
                      Align(
                        alignment: Alignment.centerRight,
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blueAccent,
                            foregroundColor: Colors.white,
                          ),
                          onPressed: () async {
                            await markNotificationAsViewed(item['grievance_id']);
                            setState(() {
                              notifications[index]['viewed'] = true;
                            });
                          },
                          child: const Text('Mark as Viewed'),
                        ),
                      ),
                  ],
                ),
              ),
            ),
          );




        },
      ),
    );
  }


}
