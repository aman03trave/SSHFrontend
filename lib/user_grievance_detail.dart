import 'dart:io';
import 'package:flutter/material.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:dio/dio.dart';
import 'package:open_file/open_file.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'config.dart';
import 'storage_service.dart';
import 'refreshtoken.dart';

class GrievanceDetailPage extends StatefulWidget {
  final Map<String, dynamic> complaint;

  GrievanceDetailPage({required this.complaint});

  @override
  _GrievanceDetailPageState createState() => _GrievanceDetailPageState();
}

class _GrievanceDetailPageState extends State<GrievanceDetailPage> {
  List<dynamic> actionLogs = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    fetchActionLogs();
  }

  Future<void> fetchActionLogs() async {
    String grievanceId = widget.complaint['grievance_id'];
    String? token = await SecureStorage.getAccessToken();

    var response = await http.post(
      Uri.parse('$baseURL/display_AL'),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: json.encode({'grievance_id': grievanceId}),
    );

    if (response.statusCode == 200) {
      var data = json.decode(response.body);
      setState(() {
        actionLogs = data;
        isLoading = false;
      });
      
    } if(response.statusCode == 401){
      bool refreshed = await refreshToken();
      if (refreshed) {
        token = await SecureStorage.getAccessToken();
        response = await http.post(
          Uri.parse('$baseURL/display_AL'),
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer $token',
          },
          body: json.encode({'grievance_id': grievanceId}),
        );
        if (response.statusCode == 200) {
          var data = json.decode(response.body);
          setState(() {
            actionLogs = data;
            isLoading = false;});
        }
      }

    }
    
    else {
      print("Failed to fetch action logs: ${response.statusCode}");
    }
  }

  Future<void> downloadAndOpenDocument(String url, BuildContext context) async {
    try {
      bool permissionGranted = await requestStoragePermission();
      if (!permissionGranted) {
        ScaffoldMessenger.of(context)
            .showSnackBar(SnackBar(content: Text("Storage permission denied")));
        return;
      }

      Directory directory = Platform.isAndroid
          ? (await getExternalStorageDirectory())!
          : await getApplicationDocumentsDirectory();

      String fileName = url.split('/').last;
      String filePath = "${directory.path}/$fileName";

      Dio dio = Dio();
      await dio.download(url, filePath);

      OpenFile.open(filePath);
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Error: $e")));
    }
  }

  Future<bool> requestStoragePermission() async {
    if (Platform.isAndroid) {
      if (await Permission.storage.isGranted) return true;

      if (await Permission.storage.request().isGranted) {
        return true;
      }

      if (await Permission.manageExternalStorage.request().isGranted) {
        return true;
      }

      return false;
    }
    return true;
  }

  String getStatusMessage(Map<String, dynamic> item) {
    final code = item['code'];
    final name = item['officer_name'];

    switch (code) {
      case "Complaint Registered":
        return 'You have registered.';
      case "Assigned to Level 2":
        return '$name has assigned your grievance to Block Educational Officer.';
      case "ATR Report Generated by Level 2":
        return 'ATR report generated by $name.';
      case "ATR Verified by Level 1":
        return '$name verified the ATR.';
      case "ATR Rejected by Level 1":
        return '$name asked for more clarification about the ATR submitted by Block Educational Officer.';
      case "ATR Updated & Resubmitted by Level 2":
        return '$name have updated and resubmitted ATR.';
      case "Complaint Disposed":
        return 'Your grievance has been marked as disposed.';
      case "Grievance Returned by Level 2":
        return '$name has returned the grievance for further clarification.';
      case "Grievance Accepted by Level 2":
        return '$name has accepted your grievance for further investigation.';
      default:
        return 'Update on "$code"';
    }
  }

  @override
  Widget build(BuildContext context) {
    final imageUrls = widget.complaint['media']?['image'];
    final documentUrls = widget.complaint['media']?['document'];

    final List<String> images = imageUrls is String ? [imageUrls] : List<String>.from(imageUrls ?? []);
    final List<String> documents = documentUrls is String ? [documentUrls] : List<String>.from(documentUrls ?? []);

    return Scaffold(
      appBar: AppBar(title: Text("${widget.complaint["title"]} (${widget.complaint["grievance_id"]})")),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (images.isNotEmpty)
              CarouselSlider(
                options: CarouselOptions(
                  height: 200.0,
                  enlargeCenterPage: true,
                ),
                items: images.map((imagePath) {
                  final imageUrl = "$baseURL/$imagePath";
                  return Builder(
                    builder: (BuildContext context) {
                      return Image.network(
                        imageUrl,
                        fit: BoxFit.cover,
                        errorBuilder: (context, error, stackTrace) => Container(
                          height: 200,
                          color: Colors.grey[300],
                          child: Icon(Icons.broken_image),
                        ),
                      );
                    },
                  );
                }).toList(),
              ),
            SizedBox(height: 16),
            Text("Description: ${widget.complaint["description"]}", style: TextStyle(fontSize: 16)),
            SizedBox(height: 16),
            Text("Documents:", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 8),
            documents.isNotEmpty
                ? Column(
              children: documents.map((docUrl) {
                final fullDocUrl = "$baseURL/$docUrl";
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 4.0),
                  child: ElevatedButton.icon(
                    icon: Icon(Icons.download),
                    label: Text("Download Document"),
                    onPressed: () => downloadAndOpenDocument(fullDocUrl, context),
                  ),
                );
              }).toList(),
            )
                : Text("No documents available."),
            SizedBox(height: 16),
            Text("Action Log", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),
            actionLogs.isNotEmpty
                ? Column(
              children: actionLogs.map((log) {
                return Card(
                  margin: const EdgeInsets.symmetric(vertical: 4),
                  child: ListTile(
                    leading: Icon(Icons.timeline, color: Colors.blue),
                    title: Text(getStatusMessage(log)),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text("Officer: ${log['officer_name']}"),
                        Text("Date: ${DateTime.parse(log['action_timestamp']).toLocal()}"),
                      ],
                    ),
                  ),
                );
              }).toList(),
            )
                : Center(child: Text("No action logs available.")),
          ],
        ),
      ),
    );
  }
}
